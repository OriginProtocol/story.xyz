import { Footer, Header, IconFormatted, LinkFormatted, MappedLink, Typography } from "@originprotocol/origin-storybook";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import Moment from "react-moment";
import styles from "../src/styles/Article.module.css";
import { fetchAPI } from "../src/helpers/fetchApi";
import requestCms from "../src/requestCmsData";

const Article = ({
  article,
  links
}: {
  article: {
    author: {
      name: string
      avatar: {
        url: string
        alternativeText: string
      }
    }
    body: string
    cover?: {
      url: string
      alternativeText: string
    },
    published_at: string
    title: string
  },
  links: MappedLink<LinkFormatted<IconFormatted>>[]
}) => {
  const imageUrl = article.cover?.url;

  return (
    <div className='relative bg-[#f8f8fe] overflow-hidden'>
      <Head>
        <title>Story.xyz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header webProperty='story' mappedLinks={links} />
      <main>
      <div
        className="pb-20 px-6"
        style={{
          backgroundColor: "#F6F8FE",
        }}
      >
        <div className="max-w-screen-lg mx-auto">
          <Typography.Link className="flex space-x-2">
            <Image
              src="/left-arrow.svg"
              width="10"
              height="7"
              className="ml-2"
              alt="left arrow"
            />
            <Link href="/company" className="ml-3">
              Back to home page
            </Link>
          </Typography.Link>
        </div>
        <div className="mb-2.5 mt-2 max-w-screen-lg mx-auto">
          <Typography.H4 as="h1" style={{ fontSize: '2.75rem', lineHeight: '3.75rem' }}>{article.title}</Typography.H4>
        </div>
        <div className="max-w-screen-lg mx-auto bg-white rounded-2xl pb-10">
          {imageUrl && (
            <div
              id="banner"
              className="bg-cover flex justify-center items-center m-0 h-96 w-full rounded-tl-2xl rounded-tr-2xl relative overflow-hidden"
              data-src={imageUrl}
              data-srcset={imageUrl}
            >
              <Image
                src={imageUrl}
                alt={article.cover?.alternativeText || ''}
                layout='fill'
                objectFit='cover'
                priority
              />
            </div>
          )}
          <div className="pt-6 md:pt-12">
            <div className={`py-6 pl-6 pr-6 md:px-28 ${styles.article}`}>
              <div
                dangerouslySetInnerHTML={{
                  __html: article.body,
                }}
              />
              <hr className="my-6" />
              <div className="flex items-center">
                <div>
                  {article.author?.avatar && (
                    <Image
                      src={article.author.avatar.url}
                      alt={article.author.avatar.alternativeText}
                      style={{
                        position: "static",
                        borderRadius: "20%",
                        height: 60,
                      }}
                      width="64px"
                      height="64px"
                    />
                  )}
                </div>
                <div className="ml-4">
                  {article.author?.name && (
                    <p>
                      By {article.author.name}
                    </p>
                  )}
                  <p>
                    <Moment format="MMM Do YYYY">{article.published_at}</Moment>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      </main>
      <Footer />
    </div>
  )
};

export async function getStaticPaths() {
  const { data } = await fetchAPI("/story/blog/slugs");

  return {
    paths: (data || []).map((slug: string) => ({
      params: { slug },
      // TODO: Should all locales be pre-generated?
      locale: "en",
    })),
    fallback: "blocking",
  };
}

export async function getStaticProps({
  params,
  locale = 'en'
}: {
  params: {
    slug: string
  },
  locale: string
}) {
  // TODO: Do something for rate-limit
  const { links } = await requestCms();
  const { data } = await fetchAPI(`/story/blog/${locale}/${params.slug}`);

  if (!data) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      article: data,
      links,
    },
    revalidate: 5 * 60, // Cache response for 5m
  };
}

export default Article;
