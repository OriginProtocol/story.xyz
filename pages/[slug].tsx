import { Footer, Header, IconFormatted, LinkFormatted, MappedLink, Typography } from "@originprotocol/origin-storybook";
import Head from "next/head";
import Image from "next/future/image";
import Link from "next/link";
import Moment from "react-moment";
import styles from "../src/styles/Article.module.css";
import { fetchAPI } from "../src/helpers/fetchApi";
import requestCms from "../src/requestCmsData";
import transformSeo from "../src/helpers/transformSeo";
import { SeoFormatted } from "../src/components/types";
import Seo from "../src/components/Seo";
import sanitizeHtml from 'sanitize-html'
import he from 'he'

const sanitizationOptions = {
  allowedTags: [ 'b', 'i', 'em', 'strong', 'u', 'a', 'img', 'h1', 'h2', 'h3', 'span', 'p', 'ul', 'ol', 'li', 'br', 'figure' ],
  allowedAttributes: {
    'a': [ 'href', 'target', 'rel' ],
    'img': [ 'src', 'alt', 'srcset', 'sizes' ],
    'span': [ 'style' ],
    'ul': [ 'style' ],
    'ol': [ 'style' ]
  },
  allowedIframeHostnames: ['www.youtube.com']
}

const Article = ({
  article,
  links,
  seo
}: {
  article: {
    author: {
      name: string
      avatar: {
        url: string
        alternativeText: string
      }
    }
    body: string
    cover?: {
      url: string
      alternativeText: string
    },
    publishedAt: string
    title: string
    publishBackdate?: string
  },
  links: MappedLink<LinkFormatted<IconFormatted>>[]
  seo: SeoFormatted
}) => {
  const imageUrl = article.cover?.url;

  return (
    <div className='relative bg-[#f6f8fe] overflow-hidden'>
      <Head>
        <title>Story.xyz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header webProperty='story' mappedLinks={links} />
      <Seo seo={seo} />
      <main>
        <div className='bg-[#f6f8fe] px-8 md:px-16 lg:px-[8.375rem] pb-8 md:pb-12'>
          <div className="max-w-[47.688rem] mx-auto">
            <Link href={'/blog'}>
              <div className='inline-block px-4 md:px-6 py-1.5 text-center rounded-full border-black border-[1px] cursor-pointer'>
                <div className='flex flex-row justify-between space-x-3 md:space-x-5'>
                  <Image
                    src="/arrow-left.svg"
                    width="10"
                    height="6"
                    className=""
                    alt="arrow"
                  />
                  <Typography.Body3 className='text-[0.75rem] md:text-[1rem]' style={{ fontWeight: 500 }}>Back to News</Typography.Body3>
                </div>
              </div>
            </Link>
            <div className="mt-6 md:mt-12">
              <Typography.H4 as="h1" className='text-[1.5rem] md:!text-[2.75rem] leading-[2rem] md:!leading-[3.75rem]'>{article.title}</Typography.H4>
            </div>
            <div className="mt-3 md:!mt-6">
              <Typography.Body3 className='text-[0.875rem] md:text-[1rem] text-[#475569]'>
                <Moment format="MMMM D YYYY">{article.publishBackdate || article.publishedAt}</Moment>
              </Typography.Body3>
            </div>
          </div>
        </div>
        <div className='gradient-article via-white to-white px-4 md:px-16 lg:px-[8.375rem]'>
          <div className="relative max-w-[47.688rem] mx-auto rounded-2xl">
            {imageUrl && (
              <div
                id="banner"
                className="rounded-2xl overflow-hidden"
                data-src={imageUrl}
                data-srcset={imageUrl}
              >
                <Image
                  src={imageUrl}
                  alt={article.cover?.alternativeText || ''}
                  width='0'
                  height='0'
                  sizes='100vw'
                  className='w-full h-auto'
                  priority
                />
              </div>
            )}
          </div>
        </div>
        <div className='bg-white px-8 md:px-16 lg:px-[8.375rem] pt-8 md:pt-16 pb-10 md:pb-[7.5rem]'>
          <div className="max-w-[47.688rem] mx-auto">
            <div
              className={`font-sansSailec ${styles.article}`}
              dangerouslySetInnerHTML={{
                __html: sanitizeHtml(he.decode(article.body), sanitizationOptions),
              }}
            />
            <div className="flex items-center mt-12 md:mt-20 space-x-6">
              {article.author?.avatar && (
                <div className='w-[57px] h-[57px]'>
                  <Image
                    src={article.author.avatar.url}
                    alt={article.author.avatar.alternativeText}
                    width='0'
                    height='0'
                    sizes='100vw'
                    className='w-full h-full rounded-full'
                    style={{ objectFit: 'cover' }}
                  />
                </div>
              )}
              <Typography.Body3 className='text-[1.125rem]'>
                {article.author?.name}
              </Typography.Body3>
            </div>
          </div>
        </div>
      </main>
      <Footer webProperty="story" />
    </div>
  )
};

export async function getStaticPaths() {
  const { data } = await fetchAPI("/story/blog/slugs");

  return {
    paths: (data || []).map((slug: string) => ({
      params: { slug },
      // TODO: Should all locales be pre-generated?
      locale: "en",
    })),
    fallback: "blocking",
  };
}

export async function getStaticProps({
  params,
  locale = 'en'
}: {
  params: {
    slug: string
  },
  locale: string
}) {
  // TODO: Do something for rate-limit
  const { links } = await requestCms();
  const { data } = await fetchAPI(`/story/blog/${locale}/${params.slug}`);

  if (!data) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      article: data,
      links,
      seo: transformSeo(data.seo)
    },
    revalidate: 5 * 60, // Cache response for 5m
  };
}

export default Article;
