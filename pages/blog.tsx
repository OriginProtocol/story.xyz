import {
  CardProps,
  Footer,
  Header,
  IconFormatted,
  LinkFormatted,
  MappedLink,
  Typography,
} from "@originprotocol/origin-storybook";
import Head from "next/head";
import Articles from "../src/components/Articles";
import { Social } from "../src/components/Community";
import Seo from "../src/components/Seo";
import { Article, Meta, SeoFormatted } from "../src/components/types";
import { fetchAPI } from "../src/helpers/fetchApi";
import transformSeo from "../src/helpers/transformSeo";
import requestCmsData from "../src/requestCmsData";
import requestOgnData from "../src/requestOgnData";

interface CollectionProps extends CardProps {
  img: string;
  imgAlt: string;
  thumbnail: string;
  thumbnailAlt?: string;
}

const Blog = ({
  links,
  articles,
  categories,
  meta,
  seo,
  locales,
  currentLocale,
}: {
  links: MappedLink<LinkFormatted<IconFormatted>>[];
  collections: CollectionProps[];
  drops: CollectionProps[];
  ognInfo: {
    circulatingOgn: number;
    totalOgn: number;
    ognPrice: number;
  };
  socials: Social[];
  articles: Article[];
  categories: {
    name: string;
    slug: string;
  }[];
  meta: Meta;
  seo: SeoFormatted;
  locales: [string, string][];
  currentLocale: string;
}) => {
  return (
    <div className="relative overflow-hidden">
      <Head>
        <title>Story.xyz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header webProperty="story" mappedLinks={links} />
      <Seo seo={seo} />
      <main>
        <section className="">
          <div className="mx-auto">
            <div className="flex flex-col px-7 py-12 max-w-screen-xl mx-auto">
              <div className="flex flex-col mt-1 md:mt-10 md:flex-row md:items-center md:justify-between px-3">
                <Typography.H3 as="h1" className="font-bold">
                  Latest stories
                </Typography.H3>
              </div>
              <Articles
                articles={articles}
                categories={categories}
                currentLocale={currentLocale}
                locales={locales}
                meta={meta}
              />
            </div>
          </div>
        </section>
      </main>
      <div className="relative z-10">
        <Footer webProperty="story" />
      </div>
    </div>
  );
};

export async function getStaticProps({ locale = "en" }: { locale: string }) {
  const { links, collections, drops, articles, meta } = await requestCmsData(
    locale
  );
  const ognInfo = await requestOgnData();
  const socialRes = await fetch(
    `${process.env.NEXT_LEGACY_WEBSITE_HOST}/social-stats`
  );
  const socials = await socialRes.json();
  const seoRes = await fetchAPI(`/story/page/${locale}/%2Fblog`);
  const localeRes = await fetchAPI("/i18n/locales");

  const categories: {
    [key: string]: { name: string; slug: string };
  } = {};

  const locales = localeRes.map((locale: { name: string; code: string }) => {
    return [locale.name, locale.code];
  });

  articles.forEach((article) => {
    if (article && article.category) {
      categories[article.category.slug] = article.category;
    }

    //there's a lot of data the client doesn't need, so delete it here
    delete article.body;
    delete article.seo?.metaImage;
    delete article.cover?.formats;
    delete article.cardCover?.formats;
    delete article.author?.avatar?.formats;
  });

  const sortedArticles = articles.sort((a: Article, b: Article) =>
    (b.publishBackdate || b.publishedAt).localeCompare(
      a.publishBackdate || a.publishedAt
    )
  );

  const categoryList = Object.values(categories);

  return {
    props: {
      links,
      collections,
      drops,
      ognInfo,
      socials: socials.stats,
      articles: sortedArticles,
      categories: categoryList,
      meta,
      seo: transformSeo(seoRes.data),
      locales,
      currentLocale: locale,
    },
    revalidate: 5 * 60, // revalidate every 5 minutes
  };
}

export default Blog;
